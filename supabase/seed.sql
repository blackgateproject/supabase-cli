-- /// INITIAL TABLES ///
-- Create table for admin requests, this is where the DID/VC are first stored
create table public.requests (
  id bigint generated by default as identity not null,
  did_str text not null default ''::text,
  form_data jsonb not null,
  network_info jsonb null default '{"ip_address": "No IP", "user_agent": "No User Agent", "location_lat": "No lat", "location_long": "No long", "user_language": "No Lang"}'::jsonb,
  "isVCSent" boolean not null default false,
  verifiable_cred jsonb null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null,
  request_status text not null,
  total_time double precision null,
  wallet_generate_time double precision null,
  wallet_encrypt_time double precision null,
  zkp_generation_time double precision null,
  vc_issuance_time double precision null,
  constraint requests_pkey primary key (id),
  constraint requests_did_str_key unique (did_str),
  constraint requests_isvcsent_check check (("isVCSent" = any (array[true, false]))),
  constraint requests_request_status_check check (
    (
      request_status = any (
        array[
          'pending'::text,
          'approved'::text,
          'rejected'::text,
          'accepted'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create table public.times_of_time (
  did_str text not null,
  wallet_gen_time double precision null default 0,
  wallet_enc_time double precision null default 0,
  network_info_time double precision null default 0,
  smt_local_add_time double precision null default 0,
  vc_issuance_time double precision null default 0,
  smt_onchain_add_time double precision null default 0,
  vp_gen_time double precision null default 0,
  client_register_total_time double precision null default 0,
  vp_verify_time double precision null default 0,
  vc_verify_time double precision null default 0,
  smt_local_verify_time double precision null default 0,
  smt_onchain_verify_time double precision null default 0,
  smt_proof_gen_time double precision null default 0,
  smt_on_server_verify_time double precision null default 0,
  smt_total_verify_time double precision null default 0,
  constraint times_of_time_pkey primary key (did_str)
) TABLESPACE pg_default;

--- Login events
create table public.login_events (
  did_str text not null,
  total_auth_duration double precision not null,
  id uuid not null default gen_random_uuid (),
  local_auth_duration double precision null,
  onchain_auth_duration double precision null,
  constraint login_events_pkey primary key (id),
  constraint login_events_did_str_check check ((did_str <> ''::text))
) TABLESPACE pg_default;


--- setup mode table
create table public.setup_state (
  id bigint generated by default as identity not null,
  is_setup_completed boolean not null default false,
  admin_did text null,
  constraint setup_state_pkey primary key (id)
) TABLESPACE pg_default;


--- Logs table
create table public.user_activity_logs (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  activity text not null,
  type text not null,
  timestamp timestamp with time zone not null default now(),
  constraint user_activity_logs_pkey primary key (id),
  constraint user_activity_logs_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;


-- Proofs table
create table public.proofs (
  id bigint generated by default as identity not null,
  hash character varying not null,
  proof jsonb not null,
  constraint proofs_pkey primary key (id)
) TABLESPACE pg_default;

-- Merkle table
create table public.merkle (
  hash character varying not null,
  proofs jsonb not null,
  did text not null,
  constraint merkle_pkey primary key (did),
  constraint merkle_hash_key unique (hash)
) TABLESPACE pg_default;


CREATE OR REPLACE VIEW public.performance_metrics AS
SELECT
  did_str,
  total_time,
  wallet_generate_time,
  wallet_encrypt_time,
  zkp_generation_time,
  vc_issuance_time
FROM
  public.requests;


-- create a view to read the auth.sessions table
create view public.sessions as
select
  sessions.id,
  sessions.user_id,
  sessions.created_at,
  sessions.updated_at,
  sessions.factor_id,
  sessions.aal,
  sessions.not_after,
  sessions.refreshed_at,
  sessions.user_agent,
  sessions.ip,
  sessions.tag
from
  auth.sessions;

-- create a view to read list of approved users, did included [WIP::]
create view public.approved_users as
select
  u.id,
  u.instance_id,
  r.did_str,
  r.request_status,
  r.created_at as request_created_at,
  r.network_info,
  r.updated_at as request_updated_at,
  r.verifiable_cred,
  u.created_at,
  u.updated_at,
  u.confirmed_at,
  u.invited_at,
  u.deleted_at,
  u.confirmation_token,
  u.confirmation_sent_at,
  u.recovery_token,
  u.recovery_sent_at,
  u.last_sign_in_at,
  u.raw_app_meta_data,
  u.raw_user_meta_data,
  u.is_super_admin,
  u.banned_until,
  u.reauthentication_token,
  u.reauthentication_sent_at,
  u.is_sso_user,
  u.is_anonymous
from
  auth.users u
  join requests r on jsonb_extract_path_text(u.raw_user_meta_data, variadic array['did'::text]) = r.did_str
where
  r.request_status = 'approved'::text;



  -- Added a few more views for metrics
  create view public.times_of_time_summary as
select
  avg(times_of_time.wallet_gen_time) as avg_wallet_gen_time,
  min(times_of_time.wallet_gen_time) as min_wallet_gen_time,
  max(times_of_time.wallet_gen_time) as max_wallet_gen_time,
  sum(times_of_time.wallet_gen_time) as total_wallet_gen_time,
  avg(times_of_time.wallet_enc_time) as avg_wallet_enc_time,
  min(times_of_time.wallet_enc_time) as min_wallet_enc_time,
  max(times_of_time.wallet_enc_time) as max_wallet_enc_time,
  sum(times_of_time.wallet_enc_time) as total_wallet_enc_time,
  avg(times_of_time.network_info_time) as avg_network_info_time,
  min(times_of_time.network_info_time) as min_network_info_time,
  max(times_of_time.network_info_time) as max_network_info_time,
  sum(times_of_time.network_info_time) as total_network_info_time,
  avg(times_of_time.smt_local_add_time) as avg_smt_local_add_time,
  min(times_of_time.smt_local_add_time) as min_smt_local_add_time,
  max(times_of_time.smt_local_add_time) as max_smt_local_add_time,
  sum(times_of_time.smt_local_add_time) as total_smt_local_add_time,
  avg(times_of_time.vc_issuance_time) as avg_vc_issuance_time,
  min(times_of_time.vc_issuance_time) as min_vc_issuance_time,
  max(times_of_time.vc_issuance_time) as max_vc_issuance_time,
  sum(times_of_time.vc_issuance_time) as total_vc_issuance_time,
  avg(times_of_time.smt_onchain_add_time) as avg_smt_onchain_add_time,
  min(times_of_time.smt_onchain_add_time) as min_smt_onchain_add_time,
  max(times_of_time.smt_onchain_add_time) as max_smt_onchain_add_time,
  sum(times_of_time.smt_onchain_add_time) as total_smt_onchain_add_time,
  avg(times_of_time.vp_gen_time) as avg_vp_gen_time,
  min(times_of_time.vp_gen_time) as min_vp_gen_time,
  max(times_of_time.vp_gen_time) as max_vp_gen_time,
  sum(times_of_time.vp_gen_time) as total_vp_gen_time,
  avg(times_of_time.client_register_total_time) as avg_client_register_total_time,
  min(times_of_time.client_register_total_time) as min_client_register_total_time,
  max(times_of_time.client_register_total_time) as max_client_register_total_time,
  sum(times_of_time.client_register_total_time) as total_client_register_total_time,
  avg(times_of_time.vp_verify_time) as avg_vp_verify_time,
  min(times_of_time.vp_verify_time) as min_vp_verify_time,
  max(times_of_time.vp_verify_time) as max_vp_verify_time,
  sum(times_of_time.vp_verify_time) as total_vp_verify_time,
  avg(times_of_time.vc_verify_time) as avg_vc_verify_time,
  min(times_of_time.vc_verify_time) as min_vc_verify_time,
  max(times_of_time.vc_verify_time) as max_vc_verify_time,
  sum(times_of_time.vc_verify_time) as total_vc_verify_time,
  avg(times_of_time.smt_local_verify_time) as avg_smt_local_verify_time,
  min(times_of_time.smt_local_verify_time) as min_smt_local_verify_time,
  max(times_of_time.smt_local_verify_time) as max_smt_local_verify_time,
  sum(times_of_time.smt_local_verify_time) as total_smt_local_verify_time,
  avg(times_of_time.smt_onchain_verify_time) as avg_smt_onchain_verify_time,
  min(times_of_time.smt_onchain_verify_time) as min_smt_onchain_verify_time,
  max(times_of_time.smt_onchain_verify_time) as max_smt_onchain_verify_time,
  sum(times_of_time.smt_onchain_verify_time) as total_smt_onchain_verify_time,
  avg(times_of_time.smt_proof_gen_time) as avg_smt_proof_gen_time,
  min(times_of_time.smt_proof_gen_time) as min_smt_proof_gen_time,
  max(times_of_time.smt_proof_gen_time) as max_smt_proof_gen_time,
  sum(times_of_time.smt_proof_gen_time) as total_smt_proof_gen_time,
  avg(times_of_time.smt_on_server_verify_time) as avg_smt_on_server_verify_time,
  min(times_of_time.smt_on_server_verify_time) as min_smt_on_server_verify_time,
  max(times_of_time.smt_on_server_verify_time) as max_smt_on_server_verify_time,
  sum(times_of_time.smt_on_server_verify_time) as total_smt_on_server_verify_time,
  avg(times_of_time.smt_total_verify_time) as avg_smt_total_verify_time,
  min(times_of_time.smt_total_verify_time) as min_smt_total_verify_time,
  max(times_of_time.smt_total_verify_time) as max_smt_total_verify_time,
  sum(times_of_time.smt_total_verify_time) as total_smt_total_verify_time
from
  times_of_time;


  -- second summary view for metrics
  create view public.times_of_time_summary_combined as
select
  avg(
    times_of_time.wallet_gen_time + times_of_time.wallet_enc_time + times_of_time.network_info_time
  ) as avg_idissue_time,
  sum(
    times_of_time.wallet_gen_time + times_of_time.wallet_enc_time + times_of_time.network_info_time
  ) as total_idissue_time,
  avg(
    times_of_time.smt_local_add_time + times_of_time.vc_issuance_time + times_of_time.smt_onchain_add_time
  ) as avg_idprove_time,
  sum(
    times_of_time.smt_local_add_time + times_of_time.vc_issuance_time + times_of_time.smt_onchain_add_time
  ) as total_idprove_time,
  avg(
    times_of_time.vp_gen_time + times_of_time.client_register_total_time + times_of_time.vp_verify_time + times_of_time.vc_verify_time + times_of_time.smt_local_verify_time + times_of_time.smt_onchain_verify_time + times_of_time.smt_proof_gen_time + times_of_time.smt_on_server_verify_time
  ) as avg_iverify_time,
  sum(
    times_of_time.vp_gen_time + times_of_time.client_register_total_time + times_of_time.vp_verify_time + times_of_time.vc_verify_time + times_of_time.smt_local_verify_time + times_of_time.smt_onchain_verify_time + times_of_time.smt_proof_gen_time + times_of_time.smt_on_server_verify_time
  ) as total_iverify_time,
  avg(times_of_time.smt_total_verify_time) as avg_update_metrics_time,
  sum(times_of_time.smt_total_verify_time) as total_update_metrics_time
from
  times_of_time;